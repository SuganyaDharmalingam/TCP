#include <iostream>
#include <fstream>
#include <sstream>
#include "ns3/core-module.h"
#include "ns3/network-module.h"
#include "ns3/internet-module.h"
#include "ns3/applications-module.h"
#include "ns3/flow-monitor-module.h"
#include "ns3/mesh-module.h"
#include "ns3/mobility-module.h"
#include "ns3/mesh-helper.h"
#include "ns3/yans-wifi-helper.h"
#include "ns3/flow-monitor.h"
#include "ns3/flow-monitor-helper.h"
#include "ns3/propagation-module.h"
#include "ns3/wifi-net-device.h"
#include "ns3/ipv4-flow-classifier.h"


using namespace ns3;

NS_LOG_COMPONENT_DEFINE ("TcpCubicMesh");

bool firstCwnd = true;
bool firstSshThr = true;
Ptr<OutputStreamWrapper>cWndStream;
Ptr<OutputStreamWrapper>ssThreshStream;
uint32_t cWndValue;
uint32_t ssThreshValue;

//---------------------TRACE CONGESTION WINDOW

static void
CwndTracer (uint32_t oldval, uint32_t newval)
{
  if (firstCwnd)
    {
      *cWndStream->GetStream () << "0.0 " <<oldval<<std::endl;
firstCwnd = false;
    }
  *cWndStream->GetStream () <<Simulator::Now ().GetSeconds () << " " <<newval<< std::endl;
cWndValue = newval;

  if (!firstSshThr)
    {
      *ssThreshStream->GetStream () <<Simulator::Now ().GetSeconds () << " " <<ssThreshValue<< std::endl;
    }
}

static void
TraceCwnd (std::string cwnd_tr_file_name)
{
AsciiTraceHelperascii;
cWndStream = ascii.CreateFileStream (cwnd_tr_file_name.c_str ());
Config::ConnectWithoutContext ("/NodeList/0/$ns3::TcpL4Protocol/SocketList/1/CongestionWindow", MakeCallback (&CwndTracer));
}

int main (int argc, char *argv[])
{
  double minRto = 0.2;
  uint32_t initialCwnd = 10;
  double error_p = 0.00;
  uint32_t size  = 3;
  uint32_t nTotal = 4;
  double start_time = 0.01;
  double stop_time = 40;
  double data_mbytes = 0;
  uint32_t mtu_bytes = 536;
std::string bandwidth = "10Mbps";
std::string delay = "18ms";
std::string access_bandwidth = "40Mbps";
std::string access_delay = "1ms";
std::string transport_prot = "TcpCubic";
std::string m_wifiStandard = "80211n2.4";
  bool m_doFlag (true);
  bool m_rfFlag (true);
std::string m_root = "ff:ff:ff:ff:ff:ff"; // Default: "ff:ff:ff:ff:ff:ff"; 
std::string m_stack = "ns3::Dot11sStack";  
  bool m_chan = true;
  double m_randomStart = 0.25;
  double m_step = 50.0;
time_trawtime;
  struct tm * timeinfo;
  char buffer[80];
  int m_xSize = 3;
  int m_ySize = 2;
  bool m_gridtopology = false;
  bool m_ascii = false;

//-------------------NAMING OUTPUT DIRECTORY USING LOCAL SYSTEM TIME

  time (&rawtime);
timeinfo = localtime(&rawtime);
strftime(buffer,sizeof(buffer),"%d-%m-%Y-%I-%M-%S",timeinfo);
std::string currentTime (buffer);

CommandLinecmd;
cmd.AddValue ("nTotal",     "Number of nodes", nTotal);
cmd.AddValue ("bandwidth", "Bottleneck bandwidth", bandwidth);
cmd.AddValue ("delay", "Bottleneck delay", delay);
cmd.AddValue ("access_bandwidth", "Access link bandwidth", access_bandwidth);
cmd.AddValue ("access_delay", "Access link delay", access_delay);
cmd.AddValue ("mtu", "Size of IP packets to send in bytes", mtu_bytes);
cmd.AddValue ("data", "Number of Megabytes of data to transmit", data_mbytes);
cmd.AddValue ("error_p", "Packet error rate", error_p);
cmd.AddValue ("qSize", "Queue Size", size);
cmd.AddValue ("start_time", "Start Time", start_time);
cmd.AddValue ("stop_time", "Stop Time", stop_time);
cmd.AddValue ("initialCwnd", "Initial Cwnd", initialCwnd);
cmd.AddValue ("minRto", "Minimum RTO", minRto);
cmd.AddValue ("transport_prot", "Transport protocol to use: TcpNewReno, "
                "TcpHybla, TcpHighSpeed, TcpHtcp, TcpVegas, TcpScalable, TcpVeno, "
                "TcpBic, TcpYeah, TcpIllinois, TcpWestwood, TcpWestwoodPlus, TcpLedbat, "
                "TcpLp, TcpBbr", transport_prot);
cmd.AddValue ("wifi-standard", "The 802.11(?) to be used by wifi stations (string)", m_wifiStandard );
cmd.AddValue ("channels",   "Use different frequency channels for different interfaces", m_chan);
cmd.AddValue ("stack", "Type of protocol stack. ns3::Dot11sStack by default", m_stack);
cmd.AddValue ("root", "Mac address of root mesh point in HWMP", m_root);
cmd.AddValue ("do-flag", "HWMP Destination only flag", m_doFlag);
cmd.AddValue ("rf-flag", "HWMP reply and forward flag", m_rfFlag );
cmd.AddValue ("wifi-standard", "The 802.11(?) to be used by wifi stations (string)", m_wifiStandard );
cmd.AddValue ("start", "Maximum random start delay for beacon jitter (sec)", m_randomStart);
cmd.AddValue ("step",   "Size of edge in our grid (meters)", m_step);
cmd.AddValue ("ascii", "Enable Ascii traces on interfaces", m_ascii);
cmd.AddValue ("grid", "Choice whether grid or random topology", m_gridtopology);

cmd.Parse (argc,argv);

//--------------------CALCULATE ADU SIZE

  Header* temp_header = new Ipv4Header ();
  uint32_t ip_header = temp_header->GetSerializedSize ();
  delete temp_header;

temp_header = new TcpHeader ();
  uint32_t tcp_header = temp_header->GetSerializedSize ();
  delete temp_header;
  uint32_t tcp_adu_size = mtu_bytes - 20 - (ip_header + tcp_header);

Config::SetDefault ("ns3::TcpSocket::SegmentSize", UintegerValue (tcp_adu_size));

DataRateaccess_b (access_bandwidth);
DataRatebottle_b (bandwidth);
  Time access_d (access_delay);
  Time bottle_d (delay);

  if (size != 0)
    {
      size *= (std::min (access_b, bottle_b).GetBitRate () / 8) * ((access_d + bottle_d) * 2).GetSeconds ();

    }


Config::SetDefault ("ns3::TcpSocket::InitialCwnd", UintegerValue (initialCwnd));
Config::SetDefault ("ns3::TcpSocketBase::MinRto", TimeValue (Seconds (minRto)));

transport_prot = std::string ("ns3::") + transport_prot;


//--------------------SELECT TCP VARIANT

  if (transport_prot.compare ("ns3::TcpWestwoodPlus") == 0)
    { 
      // TcpWestwoodPlus is not an actual TypeId name; we need TcpWestwood here
Config::SetDefault ("ns3::TcpL4Protocol::SocketType", TypeIdValue (TcpWestwood::GetTypeId ()));
      // the default protocol type in ns3::TcpWestwood is WESTWOOD
Config::SetDefault ("ns3::TcpWestwood::ProtocolType", EnumValue (TcpWestwood::WESTWOODPLUS));
    }
  else
    {
TypeIdtcpTid;
      NS_ABORT_MSG_UNLESS (TypeId::LookupByNameFailSafe (transport_prot, &tcpTid), "TypeId " <<transport_prot<< " not found");
Config::SetDefault ("ns3::TcpL4Protocol::SocketType", TypeIdValue (TypeId::LookupByName (transport_prot)));
    }

Ptr<UniformRandomVariable>uv = CreateObject<UniformRandomVariable> ();
uv->SetStream (50);
RateErrorModelerror_model;
error_model.SetRandomVariable (uv);
error_model.SetUnit (RateErrorModel::ERROR_UNIT_PACKET);
error_model.SetRate (error_p);

//---------------------CREATE NODES

NodeContainernodes;

nodes.Create(5);


 if (m_gridtopology)
  {
    NS_LOG_DEBUG ("Grid: " <<m_xSize<< "*" <<m_ySize);
  }
  else
  {
    NS_LOG_DEBUG ("Custom topology: " <<nTotal<< " nodes" );
  }
  NS_LOG_DEBUG ("Simulation time: " <<stop_time<< " s");
 if (m_ascii)
    {
PacketMetadata::Enable ();
    }


//----------------------SETUP WIFI PHY AND CHANNEL

YansWifiPhyHelperwifiPhy;
wifiPhy.SetPcapDataLinkType (WifiPhyHelper::DLT_IEEE802_11_RADIO);


//----------------------CONFIGURE PHYSICAL LAYER PARAMETERS

wifiPhy.Set ("TxPowerStart", DoubleValue(1000.0));
wifiPhy.Set ("TxPowerEnd", DoubleValue(1000.0));
wifiPhy.Set ("RxSensitivity", DoubleValue (-96.0) );  //Default: -96.0
wifiPhy.Set ("TxGain", DoubleValue (1.0) );           //Default: 0
wifiPhy.Set ("RxGain", DoubleValue (1.0) );           //Default: 0
wifiPhy.Set ("Antennas", UintegerValue (2) );

//----------------------PARAMETERS SPECIFIC FOR 802.11n/ac/ax

wifiPhy.Set ("MaxSupportedTxSpatialStreams", UintegerValue (1) );
wifiPhy.Set ("MaxSupportedRxSpatialStreams", UintegerValue (1) );


YansWifiChannelHelperwifiChannel = YansWifiChannelHelper ();

wifiChannel.AddPropagationLoss ("ns3::FriisPropagationLossModel", "Frequency", DoubleValue(2.437e9));
wifiChannel.SetPropagationDelay ("ns3::ConstantSpeedPropagationDelayModel");
wifiPhy.SetChannel (wifiChannel.Create ());

//-----------------------CONFIGURE PEER LINK PARAMETERS

Config::SetDefault ("ns3::dot11s::PeerLink::MaxBeaconLoss", UintegerValue (10));   //Default: 2
Config::SetDefault ("ns3::dot11s::PeerLink::MaxRetries", UintegerValue (4));
Config::SetDefault ("ns3::dot11s::PeerLink::MaxPacketFailure", UintegerValue (5)); //Default: 2

//-----------------------CONFIGURE HWMP PARAMETERS

Config::SetDefault ("ns3::dot11s::HwmpProtocol::Dot11MeshHWMPnetDiameterTraversalTime", TimeValue (Seconds (.4096))); //Default: .1024
Config::SetDefault ("ns3::dot11s::HwmpProtocol::Dot11MeshHWMPactivePathTimeout", TimeValue (Seconds (5.12)));    //Default: 5.12
Config::SetDefault ("ns3::dot11s::HwmpProtocol::Dot11MeshHWMPactiveRootTimeout", TimeValue (Seconds (5.12)));    //Default: 5.12

Config::SetDefault ("ns3::dot11s::HwmpProtocol::Dot11MeshHWMPmaxPREQretries", UintegerValue (3));
Config::SetDefault ("ns3::dot11s::HwmpProtocol::UnicastPreqThreshold",UintegerValue (1));
Config::SetDefault ("ns3::dot11s::HwmpProtocol::UnicastDataThreshold",UintegerValue (1));
Config::SetDefault ("ns3::dot11s::HwmpProtocol::DoFlag", BooleanValue (m_doFlag));   //Default: false
Config::SetDefault ("ns3::dot11s::HwmpProtocol::RfFlag", BooleanValue (m_rfFlag));   //Default: true


//-----------------------SETUP MESH HELPER

MeshHelpermesh;
  mesh = MeshHelper::Default ();
  if (!Mac48Address (m_root.c_str ()).IsBroadcast ())
   {
mesh.SetStackInstaller (m_stack, "Root", Mac48AddressValue (Mac48Address (m_root.c_str ())));
    }
  else
    {
      //If root is not set, we do not use "Root" attribute, because it
      //is specified only for 11s
mesh.SetStackInstaller (m_stack);
    }
  if (m_chan)
    {
mesh.SetSpreadInterfaceChannels (MeshHelper::SPREAD_CHANNELS);
    }
  else
    {
mesh.SetSpreadInterfaceChannels (MeshHelper::ZERO_CHANNEL);
    }


mesh.SetRemoteStationManager ("ns3::MinstrelHtWifiManager");

mesh.SetStandard (WIFI_STANDARD_80211n_2_4GHZ);

mesh.SetMacType ("RandomStart", TimeValue (Seconds (m_randomStart)));


//---------------------- MESH POINT DEVICE

NetDeviceContainermeshDevices;

meshDevices = mesh.Install (wifiPhy, nodes);



//-----------------------MOBILITY HELPER


MobilityHelpermobility;

mobility.SetPositionAllocator ("ns3::GridPositionAllocator",
                                 "MinX", DoubleValue (0.0),
                                 "MinY", DoubleValue (0.0),
                                 "DeltaX", DoubleValue (m_step),
                                 "DeltaY", DoubleValue (m_step),
                                 "GridWidth", UintegerValue (m_xSize),
                                 "LayoutType", StringValue ("RowFirst"));

mobility.SetMobilityModel ("ns3::ConstantPositionMobilityModel");
mobility.Install (nodes);


//----------------------Install Stack

InternetStackHelperstack;
stack.Install (nodes);

//---------------------Assign IP Addresses

 Ipv4AddressHelper address;
address.SetBase ("10.1.1.0", "255.255.255.0");
 Ipv4InterfaceContainer interface;
 interface = address.Assign (meshDevices);


//--------------------INSTALL APP ON ALL NODES

 uint16_t port = 50000;

 Address sinkLocalAddress (InetSocketAddress (Ipv4Address::GetAny (), port));
PacketSinkHelpersinkHelper ("ns3::TcpSocketFactory", sinkLocalAddress);
ApplicationContainersinkApp;

 for (uint16_t i = 0; i<nTotal; i++)
   {
sinkApp.Add (sinkHelper.Install (nodes.Get (i)));
   }

PacketSinkHelpertcpSink ("ns3::TcpSocketFactory",
                            Address (InetSocketAddress (Ipv4Address::GetAny (), port)));
sinkApp.Add (tcpSink.Install (nodes.Get (nTotal)));
sinkApp.Start (Seconds (start_time));
sinkApp.Stop (Seconds (stop_time));

BulkSendHelper ftp ("ns3::TcpSocketFactory", Address ());
ftp.SetAttribute ("MaxBytes", UintegerValue (int(data_mbytes * 1000000)));
ftp.SetAttribute ("SendSize", UintegerValue (tcp_adu_size));

ApplicationContainersourceApp;

 for (uint32_t i = 0; i<nTotal; i++)
   {
AddressValueremoteAddress (InetSocketAddress (interface.GetAddress (1), port));
ftp.SetAttribute ("Remote", remoteAddress);
sourceApp = ftp.Install (nodes.Get (i));
sourceApp.Start (Seconds (start_time + i * 0.1));
sourceApp.Stop (Seconds (stop_time - 1));
   }

AddressValueremoteAddress (InetSocketAddress (Ipv4Address::GetAny (), port));
OnOffHelperonOffHelper ("ns3::TcpSocketFactory", Address ());
onOffHelper.SetConstantRate (DataRate ("1Mbps"));
onOffHelper.SetAttribute ("OnTime", StringValue ("ns3::ConstantRandomVariable[Constant=0.01]"));
onOffHelper.SetAttribute ("OffTime", StringValue ("ns3::ConstantRandomVariable[Constant=10]"));
onOffHelper.SetAttribute ("Remote", remoteAddress);

sourceApp = onOffHelper.Install (nodes.Get (nTotal));
sourceApp.Start (Seconds (start_time));
sourceApp.Stop (Seconds (stop_time - 1));

//-------------------SETUP SIMULATION

std::string dir = "results/" + transport_prot.substr(5, transport_prot.length()) + "/" + currentTime + "/";
std::string dirToSave = "mkdir -p " + dir;
 system (dirToSave.c_str ());
Simulator::Schedule (Seconds (start_time + 0.000001), &TraceCwnd, dir + "cwnd.data");


wifiPhy.EnablePcapAll(dir + "p", nodes.Get(0));


//-------------------INSTALL FLOWMONITOR ON ALL NODES

FlowMonitorHelperflowmon;
Ptr<FlowMonitor> monitor = flowmon.InstallAll ();

std::ofstreammyfile;
myfile.open (dir + "config.txt", std::fstream::in | std::fstream::out | std::fstream::app);
myfile<< "nTotal " <<nTotal<< "\n";
myfile<< "bandwidth " << bandwidth << "\n";
myfile<< "delay  "<< delay << "\n";
myfile<< "access_bandwidth " <<access_bandwidth<< "\n";
myfile<< "access_delay " <<access_delay<< "\n";
myfile<< "mtu " <<std::to_string(mtu_bytes) << "\n";
myfile<< "data  "<< std::to_string(data_mbytes) << "\n";
myfile<< "error_p " <<error_p<< "\n";
myfile<< "qSize " << size << "\n";
myfile<< "initialCwnd  "<<initialCwnd<< "\n";
myfile<< "minRto " <<minRto<< "\n";
myfile<< "transport_prot " <<transport_prot<< "\n";
myfile.close();

Simulator::Stop (Seconds (stop_time + 1));
Simulator::Run ();

  monitor->CheckForLostPackets ();
Ptr<Ipv4FlowClassifier> classifier = DynamicCast<Ipv4FlowClassifier> (flowmon.GetClassifier ());
FlowMonitor::FlowStatsContainer stats = monitor->GetFlowStats ();
  for (std::map<FlowId, FlowMonitor::FlowStats>::const_iteratori = stats.begin (); i != stats.end (); ++i)
    {
      Ipv4FlowClassifier::FiveTuple t = classifier->FindFlow (i->first);
std::cout<< "Flow " <<i->first << " (" <<t.sourceAddress<< " -> " <<t.destinationAddress<< ")\n";
std::cout<< "  Tx Packets: " <<i->second.txPackets<< "\n";
std::cout<< "  Tx Bytes:   " <<i->second.txBytes<< "\n";
std::cout<< "  TxOffered:  " <<i->second.txBytes * 8.0 / 9.0 / 1000 / 1000  << " Mbps\n";
std::cout<< "  Rx Packets: " <<i->second.rxPackets<< "\n";
std::cout<< "  Rx Bytes:   " <<i->second.rxBytes<< "\n";
std::cout<< "  Throughput: " <<i->second.rxBytes * 8.0 / 9.0 / 1000 / 1000  << " Mbps\n";
    }


Simulator::Destroy ();
  return 0;
}

